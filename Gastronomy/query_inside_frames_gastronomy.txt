from qgis.core import QgsVectorLayer, QgsProject
from qgis.core import QgsCoordinateReferenceSystem, QgsCoordinateTransform, QgsProject
from shapely.geometry import Polygon, Point, MultiPoint
import overpy
import json

def fetch_osm_data(bbox, city_name):
    ymin, xmin, ymax, xmax = bbox
    api = overpy.Overpass()
    query = f'''
    [out:json][timeout:200];
    (
        node["amenity"="restaurant"]({xmin},{ymin},{xmax},{ymax});
        node["amenity"="bar"]({xmin},{ymin},{xmax},{ymax});
        node["amenity"="pub"]({xmin},{ymin},{xmax},{ymax});
        node["amenity"="nightclub"]({xmin},{ymin},{xmax},{ymax});
        node["amenity"="cafe"]({xmin},{ymin},{xmax},{ymax});
        node["amenity"="fast_food"]({xmin},{ymin},{xmax},{ymax});
        way["amenity"="restaurant"]({xmin},{ymin},{xmax},{ymax});
        way["amenity"="bar"]({xmin},{ymin},{xmax},{ymax});
        way["amenity"="pub"]({xmin},{ymin},{xmax},{ymax});
        way["amenity"="nightclub"]({xmin},{ymin},{xmax},{ymax});
        way["amenity"="cafe"]({xmin},{ymin},{xmax},{ymax});
        way["amenity"="fast_food"]({xmin},{ymin},{xmax},{ymax});
        relation["amenity"="restaurant"]({xmin},{ymin},{xmax},{ymax});
        relation["amenity"="bar"]({xmin},{ymin},{xmax},{ymax});
        relation["amenity"="pub"]({xmin},{ymin},{xmax},{ymax});
        relation["amenity"="nightclub"]({xmin},{ymin},{xmax},{ymax});
        relation["amenity"="cafe"]({xmin},{ymin},{xmax},{ymax});
        relation["amenity"="fast_food"]({xmin},{ymin},{xmax},{ymax});
    );
    (._;>;);
    out body;
    '''
    
    try:
        print(f"Final Overpass Query: {query}")
        
        result = api.query(query)
        
        print(f"Raw API Response: {result}")
        
        features = []
        processed_nodes = set()

        for way in result.ways:
            try:
                polygon = Polygon([(float(node.lon), float(node.lat)) for node in way.get_nodes(resolve_missing=True)])
                if polygon.is_valid:
                    point = polygon.centroid
                    properties = {k: way.tags.get(k, None) for k in ['amenity', 'name']}
                    if properties['amenity'] is not None:  # Check if 'amenity' is not None
                        features.append({
                            "type": "Feature",
                            "geometry": {
                                "type": "Point",
                                "coordinates": [point.x, point.y]
                            },
                            "properties": properties
                        })
            except Exception as e:
                print(f"Error processing way: {e}")
    
        for relation in result.relations:
            try:
                points = [Point(float(node.lon), float(node.lat)) for node in relation.get_nodes(resolve_missing=True)]
                if len(points) >= 3:
                    multipoint = MultiPoint(points)
                    point = multipoint.centroid
                    properties = {k: relation.tags.get(k, None) for k in ['amenity', 'name']}
                    if properties['amenity'] is not None:  # Check if 'amenity' is not None
                        features.append({
                            "type": "Feature",
                            "geometry": {
                                "type": "Point",
                                "coordinates": [point.x, point.y]
                            },
                            "properties": properties
                        })
            except Exception as e:
                print(f"Error processing relation: {e}")
    
        for node in result.nodes:
            if node.id not in processed_nodes:
                properties = {k: node.tags.get(k, None) for k in ['amenity', 'name']}
                if properties['amenity'] is not None:  # Check if 'amenity' is not None
                    point = Point(float(node.lon), float(node.lat))
                    features.append({
                        "type": "Feature",
                        "geometry": {
                            "type": "Point",
                            "coordinates": [point.x, point.y]
                        },
                        "properties": properties
                    })
                    processed_nodes.add(node.id)

        if len(features) == 0:
            print(f"No gastronomy establishments found for {city_name}")
        
        geojson = {
            "type": "FeatureCollection",
            "features": features
        }
        output_file = f"gastronomy_{city_name}.geojson"
        with open(output_file, 'w') as f:
            json.dump(geojson, f)
        return output_file
    except Exception as e:
        print(f"An error occurred: {e}")
        return None

# Get the active layer (the one with the rectangles)
layer = iface.activeLayer()

# Check if a layer is selected
if layer:
    source_crs = layer.crs()
    dest_crs = QgsCoordinateReferenceSystem(4326)
    transform = QgsCoordinateTransform(source_crs, dest_crs, QgsProject.instance())
    
    for feature in layer.getFeatures():
        geom = feature.geometry()
        geom.transform(transform)
        bbox = geom.boundingBox().toRectF().getCoords()
        city_name = feature['City_Name']
        print(f"Fetching data for {city_name} with bounding box {bbox}")
        
        output_file = fetch_osm_data(bbox, city_name)
        
        if output_file:
            vlayer = QgsVectorLayer(output_file, f"Gastronomy in {city_name}", "ogr")
            
            if not vlayer.isValid():
                print(f"Layer failed to load for {city_name}!")
            else:
                QgsProject.instance().addMapLayer(vlayer)
else:
    print("No active layer selected!")