from qgis.core import QgsVectorLayer, QgsProject
from qgis.core import QgsCoordinateReferenceSystem, QgsCoordinateTransform, QgsProject
import overpy
import json

def fetch_osm_data(bbox, city_name):
    ymin, xmin, ymax, xmax = bbox
    api = overpy.Overpass()
    query = f'''
    [out:json][timeout:50];
    (
        way["highway"="cycleway"]({xmin},{ymin},{xmax},{ymax});
        way["cycleway"="lane"]({xmin},{ymin},{xmax},{ymax});
        way["cycleway"="track"]({xmin},{ymin},{xmax},{ymax});
        way["cycleway:left"="lane"]({xmin},{ymin},{xmax},{ymax});
        way["cycleway:left"="opposite_lane"]({xmin},{ymin},{xmax},{ymax});
        way["cycleway:left"="track"]({xmin},{ymin},{xmax},{ymax});
        way["cycleway:left"="separate"]({xmin},{ymin},{xmax},{ymax});
        way["cycleway:right"="lane"]({xmin},{ymin},{xmax},{ymax});
        way["cycleway:right"="opposite_lane"]({xmin},{ymin},{xmax},{ymax});
        way["cycleway:right"="track"]({xmin},{ymin},{xmax},{ymax});
        way["cycleway:right"="separate"]({xmin},{ymin},{xmax},{ymax});
        way["cycleway:both"="lane"]({xmin},{ymin},{xmax},{ymax});
        way["cycleway:both"="track"]({xmin},{ymin},{xmax},{ymax});
        way["cycleway:both"="separate"]({xmin},{ymin},{xmax},{ymax});
        way["bicycle"="designated"]({xmin},{ymin},{xmax},{ymax});
    );
    (._;>;);
    out body;
    '''
    
    try:
        print(f"Final Overpass Query: {query}")
        
        result = api.query(query)
        print(f"Raw API Response: {result}")
        
        ways = [feature for feature in result.ways]
        if len(ways) == 0:
            print(f"No ways found for {city_name}")
            return None
        
        geojson = {
            "type": "FeatureCollection",
            "features": [
                {
                    "type": "Feature",
                    "geometry": {
                        "type": "LineString",
                        "coordinates": [[float(node.lon), float(node.lat)] for node in way.nodes]
                    },
                    "properties": {
                        "highway": way.tags.get("highway", None),
                        "cycleway": way.tags.get("cycleway", None),
                        "cycleway:left": way.tags.get("cycleway:left", None),
                        "cycleway:right": way.tags.get("cycleway:right", None),
                        "cycleway:both": way.tags.get("cycleway:both", None),
                        "bicycle": way.tags.get("bicycle", None),
			"footway": way.tags.get("footway", None),
			"foot": way.tags.get("foot", None),
			"segregated": way.tags.get("segregated", None)
                    }
                } for way in ways
            ]
        }
        output_file = f"cycleways_{city_name}.geojson"
        with open(output_file, 'w') as f:
            json.dump(geojson, f)
        return output_file
    except Exception as e:
        print(f"An error occurred: {e}")
        return None

# Get the active layer (the one with the rectangles)
layer = iface.activeLayer()

# Check if a layer is selected
if layer:
    source_crs = layer.crs()
    dest_crs = QgsCoordinateReferenceSystem(4326)
    transform = QgsCoordinateTransform(source_crs, dest_crs, QgsProject.instance())
    
    for feature in layer.getFeatures():
        geom = feature.geometry()
        geom.transform(transform)
        bbox = geom.boundingBox().toRectF().getCoords()
        city_name = feature['City_Name']
        print(f"Fetching data for {city_name} with bounding box {bbox}")
        
        output_file = fetch_osm_data(bbox, city_name)
        
        if output_file:
            vlayer = QgsVectorLayer(output_file, f"Cycleways in {city_name}", "ogr")
            
            if not vlayer.isValid():
                print(f"Layer failed to load for {city_name}!")
            else:
                QgsProject.instance().addMapLayer(vlayer)
else:
    print("No active layer selected!")