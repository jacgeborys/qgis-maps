from qgis.core import QgsVectorLayer, QgsProject
from qgis.core import QgsCoordinateReferenceSystem, QgsCoordinateTransform, QgsProject
import overpy
import json

def fetch_osm_data(bbox, city_name):
    ymin, xmin, ymax, xmax = bbox
    api = overpy.Overpass()
    # Query for transit routes (e.g., bus routes)
    query = f'''
    [out:json][timeout:200];
    (
        relation["type"="route"]
        ["route"~"bus|tram|train|subway|railway|ferry"]
        ({xmin},{ymin},{xmax},{ymax});
    );
    (._;>;);
    out body;
    '''
    
    try:
        print(f"Final Overpass Query: {query}")
        
        result = api.query(query)
        
        print(f"Raw API Response: {result}")
        
        relations = [relation for relation in result.relations]
        
        if len(relations) == 0:
            print(f"No transit routes found for {city_name}")
            return None
        
        geojson_features = []
        
        for relation in relations:
            # Process each member of the relation
            for member in relation.members:
                if isinstance(member, overpy.Way) and member.resolve() is not None:
                    # Check if all nodes are available
                    if all(node in result.nodes for node in member.nodes):
                        coordinates = [[float(node.lon), float(node.lat)] for node in member.resolve().nodes]
                        geojson_features.append({
                            "type": "Feature",
                            "geometry": {
                                "type": "LineString",
                                "coordinates": coordinates
                            },
                            "properties": {
                                'type': relation.tags.get('type', None),
                                'route': relation.tags.get('route', None)
                            }
                        })
        
        output_file = f"transit_routes_{city_name}.geojson"
        with open(output_file, 'w') as f:
            json.dump({"type": "FeatureCollection", "features": geojson_features}, f)
        
        print(f"GeoJSON for {city_name} created successfully.")
        return output_file
    except Exception as e:
        print(f"An error occurred: {e}")
        return None

# Get the active layer (the one with the rectangles)
layer = iface.activeLayer()

# Check if a layer is selected
if layer:
    source_crs = layer.crs()
    dest_crs = QgsCoordinateReferenceSystem(4326)
    transform = QgsCoordinateTransform(source_crs, dest_crs, QgsProject.instance())
    
    for feature in layer.getFeatures():
        geom = feature.geometry()
        geom.transform(transform)
        bbox = geom.boundingBox().toRectF().getCoords()
        city_name = feature['City_Name']
        print(f"Fetching data for {city_name} with bounding box {bbox}")
        
        output_file = fetch_osm_data(bbox, city_name)
        
        if output_file:
            vlayer = QgsVectorLayer(output_file, f"Roads in {city_name}", "ogr")
            
            if not vlayer.isValid():
                print(f"Layer failed to load for {city_name}!")
            elif vlayer.geometryType() != QgsWkbTypes.LineGeometry:
                print(f"Expected a line layer but got something else for {city_name}!")
            else:
                QgsProject.instance().addMapLayer(vlayer)

else:
    print("No active layer selected!")