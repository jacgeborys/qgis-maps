from qgis.core import QgsVectorLayer, QgsProject
from qgis.core import QgsCoordinateReferenceSystem, QgsCoordinateTransform, QgsProject
from geopy.distance import geodesic
import overpy
import json

def fetch_osm_data(bbox, city_name):
    ymin, xmin, ymax, xmax = bbox
    api = overpy.Overpass()
    query = f'''
    [out:json][timeout:50];
    (
        way["highway"~"primary|secondary|tertiary|motorway|trunk"]["tunnel"="yes"]({xmin},{ymin},{xmax},{ymax});
        way["highway"~"primary|secondary|tertiary|motorway|trunk"]["bridge"~"yes|viaduct"]({xmin},{ymin},{xmax},{ymax});
    );
    (._;>;);
    out body;
    '''
    
    try:
        print(f"Final Overpass Query: {query}")
        
        result = api.query(query)
        
        print(f"Raw API Response: {result}")
        
        ways = [feature for feature in result.ways]
        
        if len(ways) == 0:
            print(f"No ways found for {city_name}")
        
        geojson_features = []
        
        for way in ways:
            coordinates = [[float(node.lon), float(node.lat)] for node in way.nodes]
            length = 0.0
            
            for i in range(len(coordinates) - 1):
                length += geodesic(coordinates[i][::-1], coordinates[i+1][::-1]).meters
            
            if length >= 20:  # Filter out structures shorter than 20m
                properties = {key: way.tags.get(key, None) for key in ['highway', 'railway', 'bridge', 'structure']}
                geojson_features.append({
                    "type": "Feature",
                    "geometry": {
                        "type": "LineString",
                        "coordinates": coordinates
                    },
                    "properties": properties
                })
        
        output_file = f"rail_structures_{city_name}.geojson"
        with open(output_file, 'w') as f:
            json.dump({"type": "FeatureCollection", "features": geojson_features}, f)
        
        return output_file
    except Exception as e:
        print(f"An error occurred: {e}")
        return None
        
        output_file = f"structures_{city_name}.geojson"
        with open(output_file, 'w') as f:
            json.dump({"type": "FeatureCollection", "features": geojson_features}, f)
        
        return output_file
    except Exception as e:
        print(f"An error occurred: {e}")
        return None

# Get the active layer (the one with the rectangles)
layer = iface.activeLayer()

# Check if a layer is selected
if layer:
    source_crs = layer.crs()
    dest_crs = QgsCoordinateReferenceSystem(4326)
    transform = QgsCoordinateTransform(source_crs, dest_crs, QgsProject.instance())
    
    for feature in layer.getFeatures():
        geom = feature.geometry()
        geom.transform(transform)
        bbox = geom.boundingBox().toRectF().getCoords()
        city_name = feature['City_Name']
        print(f"Fetching data for {city_name} with bounding box {bbox}")
        
        output_file = fetch_osm_data(bbox, city_name)
        
        if output_file:
            vlayer = QgsVectorLayer(output_file, f"structures in {city_name}", "ogr")
            
            if not vlayer.isValid():
                print(f"Layer failed to load for {city_name}!")
            else:
                QgsProject.instance().addMapLayer(vlayer)
else:
    print("No active layer selected!")