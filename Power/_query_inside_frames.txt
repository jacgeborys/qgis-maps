from qgis.core import QgsVectorLayer, QgsProject
from qgis.core import QgsCoordinateReferenceSystem, QgsCoordinateTransform, QgsProject
import overpy
import json

def fetch_osm_data(bbox, name):
    ymin, xmin, ymax, xmax = bbox
    api = overpy.Overpass()
    query = f'''
    [out:json][timeout:500];
    (
        node["power"]({xmin},{ymin},{xmax},{ymax});
        way["power"]({xmin},{ymin},{xmax},{ymax});
    );
    (._;>;);
    out body;
    '''
    
    try:
        print(f"Final Overpass Query: {query}")
        
        result = api.query(query)
        
        print(f"Raw API Response: {result}")
        
        nodes = [feature for feature in result.nodes]
        ways = [feature for feature in result.ways]
        
        if len(nodes) == 0 and len(ways) == 0:
            print(f"No power plants found for {name}")
        
        geojson = {
            "type": "FeatureCollection",
            "features": [
                {
                    "type": "Feature",
                    "geometry": {
                        "type": "Point",
                        "coordinates": [float(node.lon), float(node.lat)]
                    },
                    "properties": {k: node.tags.get(k, None) for k in ['generator:output:electricity', 'generator:source']}
                } for node in nodes
            ] + [
                {
                    "type": "Feature",
                    "geometry": {
                        "type": "Polygon",
                        "coordinates": [[(float(node.lon), float(node.lat)) for node in way.nodes]]
                    },
                    "properties": {k: way.tags.get(k, None) for k in ['generator:output:electricity', 'generator:source']}
                } for way in ways
            ]
        }
        
        output_file = f"power_plants_{name}.geojson"
        with open(output_file, 'w') as f:
            json.dump(geojson, f)
        return output_file
    except Exception as e:
        print(f"An error occurred: {e}")
        return None

# Get the active layer (the one with the rectangles)
layer = iface.activeLayer()

# Check if a layer is selected
if layer:
    source_crs = layer.crs()
    dest_crs = QgsCoordinateReferenceSystem(4326)
    transform = QgsCoordinateTransform(source_crs, dest_crs, QgsProject.instance())
    
    for feature in layer.getFeatures():
        geom = feature.geometry()
        geom.transform(transform)
        bbox = geom.boundingBox().toRectF().getCoords()
        name = feature['name']
        print(f"Fetching data for {name} with bounding box {bbox}")
        
        output_file = fetch_osm_data(bbox, name)
        
        if output_file:
            vlayer = QgsVectorLayer(output_file, f"Power Plants in {name}", "ogr")
            
            if not vlayer.isValid():
                print(f"Layer failed to load for {name}!")
            else:
                QgsProject.instance().addMapLayer(vlayer)
else:
    print("No active layer selected!")
