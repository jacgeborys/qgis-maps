from qgis.core import QgsVectorLayer, QgsProject
from qgis.core import QgsCoordinateReferenceSystem, QgsCoordinateTransform, QgsProject
import overpy
import json

def fetch_osm_data(bbox, name):
    ymin, xmin, ymax, xmax = bbox
    api = overpy.Overpass()
    query = f'''
    [out:json][timeout:200];
    (
        way["power"="plant"]({xmin},{ymin},{xmax},{ymax});
        relation["power"="plant"]({xmin},{ymin},{xmax},{ymax});
    );
    (._;>;);
    out body;
    '''
    
    try:
        print(f"Final Overpass Query: {query}")
    
        result = api.query(query)
    
        print(f"Raw API Response: {result}")
    
        ways = [feature for feature in result.ways]
        relations = [feature for feature in result.relations]
    
        if len(ways) == 0 and len(relations) == 0:
            print(f"No ways or relations found for {name}")
    
        geojson_features = []
    
        for way in ways:
            geojson_features.append({
                "type": "Feature",
                "geometry": {
                    "type": "LineString",
                    "coordinates": [[float(node.lon), float(node.lat)] for node in way.nodes]
                },
                "properties": {k: way.tags.get(k, None) for k in ['plant:output:electricity', 'plant:source']}
            })
    
        for relation in relations:
            # Here you can decide how you want to handle relations.
            # For simplicity, let's just take the first way in the relation.
            if relation.members:
                way = relation.members[0].resolve()
                if isinstance(way, overpy.Way):
                    geojson_features.append({
                        "type": "Feature",
                        "geometry": {
                            "type": "LineString",
                            "coordinates": [[float(node.lon), float(node.lat)] for node in way.nodes]
                        },
                        "properties": {k: relation.tags.get(k, None) for k in ['plant:output:electricity', 'plant:source']}
                    })
        
                geojson = {
            "type": "FeatureCollection",
            "features": geojson_features
        }
        
        output_file = f"powerplants_{name}.geojson"
        with open(output_file, 'w') as f:
            json.dump(geojson, f)
        return output_file
    
    except Exception as e:
        print(f"An error occurred: {e}")
        return None


# Get the active layer (the one with the rectangles)
layer = iface.activeLayer()

# Check if a layer is selected
if layer:
    source_crs = layer.crs()
    dest_crs = QgsCoordinateReferenceSystem(4326)
    transform = QgsCoordinateTransform(source_crs, dest_crs, QgsProject.instance())
    
    for feature in layer.getFeatures():
        geom = feature.geometry()
        geom.transform(transform)
        bbox = geom.boundingBox().toRectF().getCoords()
        name = feature['name']
        print(f"Fetching data for {name} with bounding box {bbox}")
        
        output_file = fetch_osm_data(bbox, name)
        
        if output_file:
            vlayer = QgsVectorLayer(output_file, f"Power Plants in {name}", "ogr")
            
            if not vlayer.isValid():
                print(f"Layer failed to load for {name}!")
            else:
                QgsProject.instance().addMapLayer(vlayer)
else:
    print("No active layer selected!")