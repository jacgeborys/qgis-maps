from qgis.core import QgsVectorLayer, QgsProject
from qgis.core import QgsCoordinateReferenceSystem, QgsCoordinateTransform, QgsProject
import overpy
import json
import time

def fetch_buildings(bbox, name_en):
    ymin, xmin, ymax, xmax = bbox
    api = overpy.Overpass()
    query = f'''
    [out:json][timeout:50];
    (
        way["building"]({xmin},{ymin},{xmax},{ymax});
    );
    (._;>;);
    out body;
    '''
    
    try:
        print(f"Fetching buildings for {name_en} with bounding box {bbox}")
        result = api.query(query)
        
        buildings = [feature for feature in result.ways]
        if len(buildings) == 0:
            print(f"No buildings found for {name_en}")
            return None
        
        geojson_features = []
        for building in buildings:
            coordinates = [[float(node.lon), float(node.lat)] for node in building.nodes]
            geojson_features.append({
                "type": "Feature",
                "geometry": {
                    "type": "Polygon",
                    "coordinates": [coordinates]
                },
                "properties": {"building": building.tags.get("building", None)}
            })
        
        output_file = f"buildings_{name_en}.geojson"
        with open(output_file, 'w') as f:
            json.dump({"type": "FeatureCollection", "features": geojson_features}, f)
        
        return output_file
    except Exception as e:
        print(f"An error occurred: {e}")
        return None

# Get the active layer (Arkusze_Miasta)
layer = iface.activeLayer()

# Check if a layer is selected
if layer:
    source_crs = layer.crs()
    dest_crs = QgsCoordinateReferenceSystem(4326)
    transform = QgsCoordinateTransform(source_crs, dest_crs, QgsProject.instance())
    
    for feature in layer.getFeatures():
        geom = feature.geometry()
        geom.transform(transform)
        bbox = geom.boundingBox().toRectF().getCoords()
        name_en = feature['Name_EN']
        
        output_file = fetch_buildings(bbox, name_en)
        
        if output_file:
            print(f"Saved buildings data to {output_file}")
        else:
            print(f"Failed to fetch buildings for {name_en}")
        
        time.sleep(10)  # Wait for 10 seconds before the next request
else:
    print("No active layer selected or layer is not 'Arkusze_Miasta'")