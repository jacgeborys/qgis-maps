from qgis.core import QgsVectorLayer, QgsProject
from qgis.core import QgsCoordinateReferenceSystem, QgsCoordinateTransform, QgsProject
import overpy
import json

def fetch_osm_data(bbox, city_name):
    ymin, xmin, ymax, xmax = bbox
    api = overpy.Overpass()
    query = f'''
    [out:json][timeout:50];
    (
        way["highway"~"primary|secondary|tertiary|motorway|motorway_link|trunk"]({xmin},{ymin},{xmax},{ymax});
    );
    (._;>;);
    out body;
    '''
    
    try:
        print(f"Final Overpass Query: {query}")
        
        result = api.query(query)
        
        print(f"Raw API Response: {result}")
        
        ways = [feature for feature in result.ways]
        
        if len(ways) == 0:
            print(f"No ways found for {city_name}")
            return None
        
        geojson_features = []
        
        for way in ways:
            lanes = way.tags.get('lanes', '0')
            oneway = way.tags.get('oneway', 'no')
            # Convert lanes to an integer, handling cases where lanes is not just a number
            try:
                lanes = int(lanes.split(';')[0].split(',')[0])
            except ValueError:
                lanes = 0
        
            if (oneway == 'yes' and lanes >= 2) or (oneway == 'no' and lanes >= 4):
                coordinates = [[float(node.lon), float(node.lat)] for node in way.nodes]
                geojson_features.append({
                    "type": "Feature",
                    "geometry": {
                        "type": "LineString",
                        "coordinates": coordinates
                    },
                    "properties": {
                        'oneway': way.tags.get('oneway', None),
                        'lanes': way.tags.get('lanes', None),
                        'highway': way.tags.get('highway', None),
                        'motorroad': way.tags.get('motorroad', None)
                    }
                })
        
        output_file = f"roads_{city_name}.geojson"
        with open(output_file, 'w') as f:
            json.dump({"type": "FeatureCollection", "features": geojson_features}, f)
        
        print(f"GeoJSON for {city_name} created successfully.")
        return output_file
    except Exception as e:
        print(f"An error occurred: {e}")
        return None

# Get the active layer (the one with the rectangles)
layer = iface.activeLayer()

# Check if a layer is selected
if layer:
    source_crs = layer.crs()
    dest_crs = QgsCoordinateReferenceSystem(4326)
    transform = QgsCoordinateTransform(source_crs, dest_crs, QgsProject.instance())
    
    for feature in layer.getFeatures():
        geom = feature.geometry()
        geom.transform(transform)
        bbox = geom.boundingBox().toRectF().getCoords()
        city_name = feature['City_Name']
        print(f"Fetching data for {city_name} with bounding box {bbox}")
        
        output_file = fetch_osm_data(bbox, city_name)
        
        if output_file:
            vlayer = QgsVectorLayer(output_file, f"Roads in {city_name}", "ogr")
            
            if not vlayer.isValid():
                print(f"Layer failed to load for {city_name}!")
            elif vlayer.geometryType() != QgsWkbTypes.LineGeometry:
                print(f"Expected a line layer but got something else for {city_name}!")
            else:
                QgsProject.instance().addMapLayer(vlayer)

else:
    print("No active layer selected!")